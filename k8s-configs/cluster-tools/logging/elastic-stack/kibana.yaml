---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      initContainers:

      # - name: create-certs
      #   image: 7es7/enrichment-bootstrap:latest
      #   workingDir: /scripts
      #   command: ["sh", '$(CONTAINER_NAME).sh']

      #   securityContext:
      #     runAsUser: 0
      #     runAsGroup: 0

      #   env:
      #   - name: CONTAINER_NAME
      #     value: "create-certs"
      #   - name: CERTS_DIR
      #     value: "/enrichment-shared-volume/certs"
      #   - name: ES_PATH_CONF
      #     value: "/usr/share/elasticsearch/data/config"
      #   - name: POD_NAME
      #     valueFrom:
      #       fieldRef:
      #         fieldPath: metadata.name
      #   - name: POD_IP
      #     valueFrom:
      #       fieldRef:
      #         fieldPath: status.podIP

      #   volumeMounts:
      #   - name: enrichment-shared-volume
      #     mountPath: /enrichment-shared-volume
      #     readOnly: false

      - name: check-service-availability
        image: 7es7/enrichment-bootstrap:latest
        command: ["sh", '$(CONTAINER_NAME).sh']

        env:
        - name: CONTAINER_NAME
          value: "check-service-availability"

        - name: CHECK_SERVICE_URL
          value: "https://elasticsearch"
        - name: CHECK_SERVICE_PORT
          value: "9200"
        - name: CHECK_SERVICE_USER
          valueFrom:
            secretKeyRef:
              name: elk-secrets
              key: KIBANA_USER_B64
        - name: CHECK_SERVICE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elk-secrets
              key: KIBANA_PASSWORD_B64
        - name: CERTS_DIR
          value: "/enrichment-shared-volume/certs"
        - name: CHECK_SERVICE_CERT
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DESIRED_STATUS
          value: "green"

        volumeMounts:
          - name: enrichment-shared-volume
            mountPath: /enrichment-shared-volume

      - name: get-kibana-config
        image: gcr.io/ping-identity/ping-cloud-enrichment-bootstrap/ping-cloud-enrichment-bootstrap:latest
        workingDir: /scripts
        command: ["sh", '$(CONTAINER_NAME).sh']

        env:
        - name: CONTAINER_NAME
          value: "get-kibana-config"

        volumeMounts:
        - name: enrichment-shared-volume
          mountPath: /enrichment-shared-volume
          readOnly: false

      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:7.6.0
        # command: ["sh", "-c", "sleep 9999999999999"]

        env:
        - name: CONTAINER_NAME
          value: "kibana"
        - name: CERTS_DIR
          value: "/enrichment-shared-volume/certs"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name


        # - name: LOGGING_VERBOSE
        #   value: "true"

        - name: SERVER_NAME
          value: "ping-kibana"
        - name: SERVER_HOST
          value: "127.0.0.1"
        - name: SERVER_PORT
          value: "5601"
        - name: ELASTICSEARCH_HOSTS
          value: "https://elasticsearch:9200"
        # - name: ELASTICSEARCH_URL
        #   value: "https://elasticsearch:9200"
        - name: ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: elk-secrets
              key: ELASTIC_USER_B64
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elk-secrets
              key: ELASTIC_PASSWORD_B64

        - name: XPACK_MONITORING_ENABLED
          value: "true"
        - name: XPACK_MONITORING_ELASTICSEARCH_URL
          value: "https://elasticsearch:9200"
        - name: XPACK_MONITORING_ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
          value: "$(CERTS_DIR)/ca/ca.crt"

        - name: SERVER_SSL_ENABLED
          value: "true"
        - name: SERVER_SSL_CERTIFICATE
          value: "$(CERTS_DIR)/kibana/kibana.crt"
        - name: SERVER_SSL_KEY
          value: "$(CERTS_DIR)/kibana/kibana.key"
        # - name: SERVER_SSL_CERTIFICATE
        #   value: "$(CERTS_DIR)/$(POD_NAME)/$(POD_NAME).crt"
        # - name: SERVER_SSL_KEY
        #   value: "$(CERTS_DIR)/$(POD_NAME)/$(POD_NAME).key"

        - name: ELASTICSEARCH_SSL_VERIFICATIONMODE
          value: "none"
        
        - name: ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES
          value: "$(CERTS_DIR)/ca/ca.crt"
        - name: ELASTICSEARCH_SSL_CERTIFICATE
          value: "$(CERTS_DIR)/kibana/kibana.crt"
        - name: ELASTICSEARCH_SSL_KEY
          value: "$(CERTS_DIR)/kibana/kibana.key"
        # - name: ELASTICSEARCH_SSL_CERTIFICATE
        #   value: "$(CERTS_DIR)/$(POD_NAME)/$(POD_NAME).crt"
        # - name: ELASTICSEARCH_SSL_KEY
        #   value: "$(CERTS_DIR)/$(POD_NAME)/$(POD_NAME).key"

        resources:
          limits:
            memory: 1Gi
            cpu: 1000m
          requests:
            memory: 512Mi
            cpu: 100m

        ports:
        - name: http
          containerPort: 5601

        volumeMounts:
          - mountPath: /enrichment-shared-volume
            name: enrichment-shared-volume
            readOnly: false
          # - name: enrichment-kibana-config
          #   mountPath: /usr/share/kibana/config/kibana.yml
          #   subPath: kibana.yml


      volumes:
        - name: enrichment-shared-volume
          nfs:
            server: ${EFS_FILESYSTEM_ID}.efs.${REGION}.amazonaws.com
            path: /
        # - name: enrichment-kibana-config
        #   configMap:
        #     name: enrichment-kibana-config

---
# This service exposes the Kibana http port to the cluster.
apiVersion: v1
kind: Service
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  ports:
  - port: 5601
    name: http
  selector:
    app: kibana
